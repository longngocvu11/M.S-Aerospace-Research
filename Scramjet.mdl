//------------------------------------------------------------------------
//                            Model Definition 
//------------------------------------------------------------------------

// Instantiate the Ambient element
// This element sets the ambient conditions
// and is refered to by the InletStart and Nozzle elements

Element Ambient Amb {
  switchMode = "PSTSMN"; //"ALDTMN"; // Set ambient conditions based on altitude, Mach number, and standard day delta T 
  //alt_in = 35000.; // ft, input altitude
  MN_in = 1.714;// input, Mach number
  Ps_in = 35.0354;
  Ts_in = 2841.18;
  //dTs_in = 0.; // Rankine, input temperature delta from standard day conditions
} // END Amb

// Instantiate the InletStart element

Element InletStart FsEng {
  AmbientName = "Amb"; // Name of the Ambient element
  W_in = 100.; // lbm/s, input air flow flow rate
} // End InletStart
/*
// Instantiate the Inlet element 

Element SJComp0D InEng {
  //eRamBase = 0.995; // Ram pressure recovery // **erase to get rid of warning
  eff = 0.9; // eta_C
  psi = 5.; // T3/T0
} // END InEng
*/
// Start the flow of fuel

Element FuelStart FusEng {
	//   FAR = 0.05; // lbm/s, fuel flow rate (Used ONLY when Burner switchBurn = WFUEL)
	//Wfuel = 0.03*350.;
	//LHV = 860.; // BTU/lbm, user input fuel lower heating value (LHV).  Default is 18400 BTU/lbm
	fuelType = "H2";
	//hFuel = 18871.;//-774.; // BTU/lbm
	//Wfuel = 0.04*350.;
} // End FusEng

// Instantiate the Burner element

Element SJBurner1D BrnPri {
	//dPqPfBase         = 0.05; // user input friction relative pressure drop (Pin - Pout)/Pin
	//dPqP_dmd         = 0.05; // user input friction relative pressure drop (Pin - Pout)/Pin
	//effBase           = 0.99; // user input burner adiabatic efficiency
	/*
	Vfxr = 0.5;
	Vfr = 0.5;
	CfAr = 0.1;
	Tref = 400.;
	hf = 0.0;
	eff = 0.9;
	*/
	// The value for switchBurn determines how burner fuel flow rate is set
	// if switchBurn = FUEL, then use Wfuel that is set in the burner element 
	// if switchBurn = WFUEL, then use fuel start element flow rate to set Wfuel (Fu_I.Wfuel inherited from fuel start Fu_O.Wfuel)
	// if switchBurn = FAR, then use air inlet FAR value (Fl_I.FAR) to calculate Wfuel
	//switchBurn = "WFUEL"; // FUEL, WFUEL, or FAR
	// Wfuel = 0.2; // lbm/s, user input fuel flow rate.  Used only whey switchBurn = FUEL
	
	Niatt = 100;
	Nisep = 100;
	Li = 10.;
	Nc = 100;
	Lc = 10.;
	mode = 0;
	Ajet3 = 50.;
	a1 = 1.; a2 = 500.;
	b1 = 1.; b2 = 100.;
	FARstoic = 0.02;
	//Cf = 0.1;
	Tw = 600.;
} // End BrnPri
/*
// Instantiate the Nozzle element for the primary flow

Element SJExpa0D NozPri {
  //PsExhName = "Amb.Ps"; // Model variable for ambient static pressure
  //switchType = "CONIC"; // conic nozzle
  eff = 0.9;
  ambpr = 1.; // p10/p0
} //END NozPri

// End the flow of air for primary stream
*/
Element FlowEnd FeEng {
} // End FrPri
/*
// Instantiate the EngPerf element
// This element makes some basic engine performance calculations

Element SJEngPerf0D Perf {
} //End Perf
*/
//------------------------------------------------------------------------
//                           Component Linkages
//------------------------------------------------------------------------

// Link Fluid Ports
linkPorts( "FsEng.Fl_O"        , "BrnPri.Fl_I"      , "F020" );
linkPorts( "BrnPri.Fl_O"       , "FeEng.Fl_I"     , "F040" );

// Set Transport Properties for CEA to calculate Cp
F020.setOption("switchTransport", "EQUIL");
F040.setOption("switchTransport", "EQUIL");

// Link Fuel Ports
linkPorts( "FusEng.Fu_O"   	   , "BrnPri.Fu_I"     , "Fu_In" );
/*
// Link Data Ports
linkPorts( "InEng.A0"   	   , "NozPri.A0"     , "A0" );
linkPorts( "InEng.p0"   	   , "NozPri.p0"     , "p0" );

linkPorts( "InEng.Sa0"   	   , "Perf.Sa0"     , "sa0" );
linkPorts( "InEng.R0"   	   , "Perf.R0"     , "R0" );
linkPorts( "InEng.T0"   	   , "Perf.T0"     , "T0" );
linkPorts( "InEng.V0"   	   , "Perf.V0"     , "V0" );

linkPorts( "BrnPri.LHV"   	   , "Perf.LHV"     , "LHV" );
linkPorts( "BrnPri.FAR"   	   , "Perf.FAR"     , "FAR" );
linkPorts( "BrnPri.FAR"   	   , "NozPri.FARb"   , "FARb" );

linkPorts( "NozPri.Sa10"   	   , "Perf.Sa10"     , "Sa10" );
linkPorts( "NozPri.A10"   	   , "Perf.A10"     , "A10" );
*/

//------------------------------------------------------------------------
//                           Solver Variables
//------------------------------------------------------------------------
/*
real A2_req;
// Declare a solver independent variable that varies engine air flow rate
Independent ind_Wair{
	varName = "FsEng.W_in";
}
// Declare a solver dependent variable that targets a specified engine net thrust, Perf.Fn 
Dependent dep_A2 {
        eq_lhs = "F020.Aphy"; // model value
        eq_rhs = "A2_req"; // target value
}
*/